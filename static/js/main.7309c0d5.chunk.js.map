{"version":3,"sources":["components/ColorfulMessage.jsx","App.js","index.js"],"names":["ColorfulMessage","props","color","children","contentStyle","fontSize","style","App","useState","num","setNum","faceShowFlag","setFaceShowFlag","useEffect","message","onClick","ReactDom","render","document","getElementById"],"mappings":"iKAqBeA,EAjBS,SAACC,GAGvB,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACTC,EAAe,CAGnBF,QACAG,SAAU,QAMZ,OAAO,mBAAGC,MAAOF,EAAV,SAAyBD,KCiCnBI,EA9CH,WACV,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAwBA,OAbAC,qBAAU,WAEJJ,EAAM,IAAM,EACdE,GAAgBC,GAAgB,GAEhCD,GAAgBC,GAAgB,KAEjC,CAACH,IAOF,qCAEE,oBAAIH,MAAO,CAAEJ,MAAO,OAApB,6CAIA,cAAC,EAAD,CAAiBA,MAAM,OAAvB,wDACA,cAAC,EAAD,CAAiBA,MAAM,OAAOY,QAAQ,8BAEtC,wBAAQC,QAhCW,WACrBL,EAAOD,EAAM,IA+BX,wDACA,uBACA,wBAAQM,QA9BkB,WAC5BH,GAAiBD,IA6Bf,oBACA,4BAAIF,IACHE,GAAgB,0CCrBvBK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7309c0d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// defaultじゃないやり方：importする際に分割代入しないといけない（ブラケットで受け取り（変数名は元のものが引き継がれる）\r\n// export const ColorfulMessage = (props) => {\r\nconst ColorfulMessage = (props) => {\r\n  // console.log(props);\r\n  //分割代入（propsから）\r\n  const { color, children } = props;\r\n  const contentStyle = {\r\n    //値は文字列！\r\n    // color: color,\r\n    color, //JSではプロパティ名=オブジェクト名の時、オブジェクト名(コロン以下)を省略できる。\r\n    fontSize: \"18px\"\r\n  };\r\n\r\n  //JSなのでpropsは{}\r\n  // return <p style={contentStyle}>{props.message}</p>;\r\n  //タグで囲った中身を受け取るchildren\r\n  return <p style={contentStyle}>{children}</p>;\r\n};\r\n\r\nexport default ColorfulMessage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ColorfulMessage from \"./components/ColorfulMessage\";\r\n\r\n//コンポーネント化（Reactではファイルごとにコンポーネント化を行う\r\n//コンポーネントはは「パスカルケース」で命名（先頭および単語区切りが大文字）\r\nconst App = () => {\r\n  const [num, setNum] = useState(0); //初期値を設定できる\r\n  const [faceShowFlag, setFaceShowFlag] = useState(true);\r\n\r\n  const onClickCountUp = () => {\r\n    setNum(num + 1);\r\n  };\r\n\r\n  const onClickSwitchShowFlag = () => {\r\n    setFaceShowFlag(!faceShowFlag);\r\n  };\r\n\r\n  //numを監視。第2引数は配列可能。空の配列の時：最初の１回のみ処理はいる。処理を追いたい変数を配列とする\r\n  useEffect(() => {\r\n    //esリント：numの分岐内の変数を書かないとエラーになる\r\n    if (num % 3 === 0) {\r\n      faceShowFlag || setFaceShowFlag(true);\r\n    } else {\r\n      faceShowFlag && setFaceShowFlag(false);\r\n    }\r\n  }, [num]);\r\n\r\n  //State：条件によって動的に変わるもの\r\n  // →配列の分割代入でuseStateから変数を取得\r\n  // →1:stateの変数名(任意の名前)、2:stateを変更する関数名(set + 変数名　が一般的)\r\n\r\n  return (\r\n    <>\r\n      {/* 外：JS、内：JSのオブジェクト（スタイルはオブジェクト）*/}\r\n      <h1 style={{ color: \"red\" }}>こんにちは!</h1>\r\n      {/* props名=値　　props名は何でもいい */}\r\n      {/* <ColorfulMessage color=\"blue\" message=\"お元気ですか？\" /> */}\r\n      {/* タグっぽく書く場合 */}\r\n      <ColorfulMessage color=\"blue\">お元気ですか？</ColorfulMessage>\r\n      <ColorfulMessage color=\"pink\" message=\"元気です!\" />\r\n      {/* htmlタグがキャメルケースで判別され、その{}の中はJSとして判断される */}\r\n      <button onClick={onClickCountUp}>カウントアップ</button>\r\n      <br />\r\n      <button onClick={onClickSwitchShowFlag}>on/off</button>\r\n      <p>{num}</p>\r\n      {faceShowFlag && <p>(^^)/</p>}\r\n    </>\r\n  );\r\n};\r\n\r\n//ほかのファイルでも関数を使えるように\r\nexport default App;\r\n","import React from \"react\"; //reactを使うには必要だったが、React17より必須でなくなった。\n//DOM:HTMLにコンポーネントを反映させるために必要\nimport ReactDom from \"react-dom\";\n//他ファイルから関数読み込み\nimport App from \"./App\";\n\n// //reactでは関数を使ってコンポーネントを表現\n// const App = () => {\n//   //JSX記法：divタグで囲まないとエラー\n//   //  →divだとレンダリングされるので、エラー回避策としてReact.Fragmentが使える\n//   //  →React.Fragmentだと長いので<>でいけるようになった\n//   return (\n//     // <div>\n//     // <React.Fragment>\n//     <>\n//       <h1>こんにちは!</h1>\n//       <p>お元気ですか?</p>\n//       {/*  </div> */}\n//       {/* </React.Fragment> */}\n//     </>\n//   );\n// };\n\n//画面に反映 1:レンダリングするもの、2:どこに反映するか\nReactDom.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}